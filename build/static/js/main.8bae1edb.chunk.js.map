{"version":3,"sources":["components/Error140.jsx","lib/api.js","components/TweetContext.jsx","components/createTweet.jsx","components/TweetList.jsx","components/Loader.jsx","components/TweetPage.jsx","components/NavBar.jsx","components/UserProfile.jsx","App.js","serviceWorker.js","index.js"],"names":["Error140","className","baseUrl","TweetContext","React","createContext","tweets","addTweet","addTweets","setErrorMessege","CreateTweet","useState","tweetInput","setTweetInput","contex","useContext","handleOnSubmit","event","a","preventDefault","list","localStorage","getItem","parsedList","JSON","parse","trackPromise","tweet","content","date","Date","toISOString","userName","axios","post","then","respond","data","console","log","catch","err","message","Card","style","backgroundColor","onSubmit","TextField","inputProps","maxLength","color","multiline","width","rows","autoFocus","id","name","placeholder","value","onChange","target","required","Grid","container","spacing","item","xs","length","Button","disabled","type","variant","useStyles","makeStyles","root","minWidth","TweetList","classes","List","map","ListItem","paddingLeft","paddingRight","key","minHeight","CardActions","marginLeft","CardActionArea","CardContent","Typography","LoadingIndicator","height","display","justifyContent","alignItems","TweetPage","setTweets","load","setLoad","errorMessage","setErrorMessage","promiseInProgress","usePromiseTracker","useEffect","setInterval","get","response","Provider","arr","error","Container","maxWidth","NavBar","Row","AppBar","borderRadius","alignSelf","position","Toolbar","textDecoration","to","UserProfile","setName","setItem","stringify","htmlFor","Input","border","App","CssBaseline","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8bae1edb.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Error140 = () => {\n  return (\n    <div className=\"error140\">The tweet can't contain more then 140 chars.</div>\n  );\n}\nexport default Error140;\n","import axios from 'axios';\nconst baseUrl = 'https://fullstack-web-course.ew.r.appspot.com/';\n\n\n\nexport function getTweets() {\n    return axios.get(`${baseUrl}tweet`);\n  }\n\n  export function createTweet(tweet) {\n    return axios.post(`${baseUrl}tweet`, tweet);\n  }","import React from \"react\";\n\nconst TweetContext = React.createContext({\n  tweets: [],\n  addTweet: () => {},\n  addTweets: () => {},\n  setErrorMessege: () => {},\n});\n\nexport default TweetContext;\n","import React, { useState, useContext } from \"react\";\nimport { Card, TextField, Button, Grid } from \"@material-ui/core\";\nimport Error140 from \"./Error140\";\nimport { createTweet } from \"../lib/api\";\nimport { trackPromise } from \"react-promise-tracker\";\nimport TweetContext from \"./TweetContext\";\n\nconst CreateTweet = () => {\n  const [tweetInput, setTweetInput] = useState(\"\");\n  const contex = useContext(TweetContext);\n \n  const handleOnSubmit = async (event) => {\n    event.preventDefault();\n    const list = localStorage.getItem(\"userName\");\n    const parsedList = JSON.parse(list);\n    if (tweetInput !== \"\") {\n      trackPromise(\n        createTweet({\n          content: tweetInput,\n          date: new Date().toISOString(),\n          userName: parsedList,\n        }).then((respond) => {\n              const { data } = respond;\n              console.log(data)\n              contex.addTweet(data);\n            })\n          .catch((err) => {\n            contex.setErrorMessege(err.message);\n          })\n      );\n    }\n    //clear input after submit\n    setTweetInput(\"\");\n  };\n\n  return (\n        <Card\n        className=\"create-tweet-card\"\n        style={{\n          backgroundColor: \"#343A40\",\n        }}\n      >\n        <form className=\"form\" onSubmit={handleOnSubmit}>\n          <TextField\n            inputProps={{ maxLength: 140, style: { color: \"white\" } }}\n            multiline\n            style={{ width: \"100%\" }}\n            rows={9}\n            className=\"input\"\n            autoFocus\n            id=\"tweet\"\n            name=\"tweetInput\"\n            placeholder=\"What you have in mind...\"\n            value={tweetInput}\n            onChange={(event) => setTweetInput(event.target.value)}\n            required\n          />\n          <Grid container spacing={3}>\n            <Grid item xs={10}>\n              {tweetInput.length === 140 ? <Error140 /> : <span></span>}\n            </Grid>\n            <Grid item xs={2}>\n              <Button\n                className=\"submit-buttton\"\n                disabled={tweetInput.length === 140}\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n              >\n                Tweet\n              </Button>\n            </Grid>\n          </Grid>\n        </form>\n      </Card>\n  );\n}\nexport default CreateTweet;\n","import React, {useContext} from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport \"../App.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TweetContext from \"./TweetContext\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: \"100%\",\n    backgroundColor: \"#343A40\",\n    color: \"white\",\n  },\n});\n\nconst TweetList = () => {\n  const classes = useStyles();\n  const contex = useContext(TweetContext);\n  return (\n    <List>\n      {contex.tweets.map((item) => (\n        <ListItem style={{ paddingLeft: \"0\", paddingRight: \"0\" }} key={item.id}>\n          <Card className={classes.root} style={{ minHeight: \"100px\" }}>\n            <CardActions>\n              <span style={{ color: \"#6C757D\" }}>{item.userName}</span>\n              <span style={{ marginLeft: \"auto\", color: \"#6C757D\" }}>\n                {item.date}\n              </span>\n            </CardActions>\n            <CardActionArea>\n              <CardContent>\n                <Typography>{item.content}</Typography>\n              </CardContent>\n            </CardActionArea>\n          </Card>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\nexport default TweetList;\n","import React from \"react\";\nimport Loader from \"react-loader-spinner\";\n\nconst LoadingIndicator = () => {\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Loader type=\"ThreeDots\" color=\"#2BAD60\" height=\"100\" width=\"100\" />\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useState, useEffect } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport CreateTweet from \"./createTweet\";\nimport TweetList from \"./TweetList\";\nimport LoadingIndicator from \"./Loader\";\nimport TweetContext from \"./TweetContext\";\nimport { getTweets } from \"../lib/api\";\nimport { usePromiseTracker } from \"react-promise-tracker\";\n\nconst TweetPage = () => {\n  const [tweets, setTweets] = useState([]);\n  const [load, setLoad] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const { promiseInProgress } = usePromiseTracker();\n\n  useEffect(() => {\n    setInterval(\n      () =>\n        getTweets()\n          .then((response) => {\n            const { data } = response;\n            setTweets(data.tweets);\n            setLoad(false)\n          })\n          .catch((err) => {\n            setErrorMessage(err.message);\n          }),\n      1000\n    );\n    \n  },[]);\n\n  const addTweet = (tweet) => {\n    setTweets([tweet, ...tweets]);\n  };\n\n  const addTweets = (arr) => {\n    setTweets(arr);\n  };\n  const setErrorMessege = (error) => {\n    setErrorMessage(error);\n  };\n\n  return (\n    <TweetContext.Provider\n      value={{ tweets, addTweet, addTweets, setErrorMessege }}\n    >\n      <div>\n        <Container maxWidth=\"sm\">\n          <CreateTweet />\n          {promiseInProgress || load ? <LoadingIndicator /> : \"\"}\n          {errorMessage && <h3 className=\"error\">{errorMessage}</h3>}\n          <TweetList />\n        </Container>\n      </div>\n    </TweetContext.Provider>\n  );\n};\n\nexport default TweetPage;\n","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Row from \"react-bootstrap/Row\";\nimport { Link } from \"react-router-dom\";\n\nconst NavBar = () => {\n  return (\n    <Row style={{ justifyContent: \"center\", display: \"flex\" }}>\n      <AppBar\n        style={{\n          backgroundColor: \"#343A40\",\n          borderRadius: \"6px\",\n          width: \"80%\",\n          alignSelf: \"center\",\n        }}\n        position=\"static\"\n      >\n        <Toolbar>\n          <Link style={{ textDecoration: \"none\" }} to=\"/\">\n            <Typography variant=\"h5\" style={{ color: \"white\" }}>\n              Home\n            </Typography>\n          </Link>\n\n          <Link style={{ textDecoration: \"none\" }} to=\"/profile\">\n            <Typography\n              style={{\n                marginLeft: \"45px\",\n                color: \"white\",\n              }}\n              variant=\"h5\"\n              color=\"inherit\"\n            >\n              Profile\n            </Typography>\n          </Link>\n        </Toolbar>\n      </AppBar>\n    </Row>\n  );\n};\n\nexport default NavBar;\n","import React, { useState } from \"react\";\nimport { Button, Input, Container } from \"@material-ui/core\";\n\nconst UserProfile = () => {\n  const [name, setName] = useState(\"\");\n\n  const handleOnSubmit = async (event) => {\n    event.preventDefault();\n    localStorage.setItem(\"userName\", JSON.stringify(name));\n    setName(\"\");\n  };\n\n  const handleOnNameChange = (event) => {\n    setName(event.target.value);\n  };\n\n  return (\n    <Container style={{ width: \"76%\" }}>\n      <form className=\"user-form\" onSubmit={handleOnSubmit}>\n        <h1 className=\"margin-top-52px, h1-custom\">Profile</h1>\n        <h3 className=\"h3-custom\">User Name</h3>\n        <label htmlFor=\"userName\"></label>\n        <Input\n          style={{\n            height: \"61px\",\n            color: \"white\",\n            border: \"2px solid white\",\n            borderRadius: \"6px\",\n          }}\n          autoFocus\n          id=\"userName\"\n          name=\"name\"\n          value={name}\n          onChange={handleOnNameChange}\n          inputProps={{ \"aria-label\": \"description\" }}\n          required\n        />\n        <Button\n          className=\"user-profile-button\"\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Save\n        </Button>\n      </form>\n    </Container>\n  );\n};\n\nexport default UserProfile;\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport './App.css';\nimport TweetPage from './components/TweetPage';\nimport NavBar from './components/NavBar';\nimport Container from 'react-bootstrap/Container'\nimport UserProfile from './components/UserProfile';\nimport { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <CssBaseline />\n        <Container>\n            <NavBar/>\n            <Switch>\n              <Route path=\"/profile\">\n                <UserProfile />\n              </Route>\n              <Route path=\"/\">\n                <TweetPage />\n              </Route>\n            </Switch>\n        </Container>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}