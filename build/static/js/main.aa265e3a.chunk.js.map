{"version":3,"sources":["components/Error140.jsx","lib/api.js","components/TweetContext.jsx","components/createTweet.jsx","components/TweetList.jsx","components/Loader.jsx","components/TweetPage.jsx","components/NavBar.jsx","components/UserProfile.jsx","App.js","serviceWorker.js","index.js"],"names":["Error140","className","baseUrl","TweetContext","React","createContext","tweets","addTweet","addTweets","setErrorMessege","useStyles","makeStyles","root","marginTop","border","height","color","backgroundColor","button","position","bottom","left","width","borderRadius","alignSelf","CreateTweet","classes","useState","tweetInput","setTweetInput","contex","useContext","handleOnSubmit","event","a","preventDefault","list","localStorage","getItem","parsedList","JSON","parse","trackPromise","tweet","content","date","Date","toISOString","userName","axios","post","then","respond","data","console","log","catch","err","message","Card","onSubmit","TextField","onKeyDown","keyCode","shiftKey","inputProps","maxLength","style","multiline","rows","autoFocus","id","name","placeholder","value","onChange","target","required","length","Button","disabled","type","variant","minWidth","TweetList","List","map","item","ListItem","paddingLeft","paddingRight","key","minHeight","CardActions","marginLeft","CardActionArea","CardContent","Typography","wordWrap","LoadingIndicator","display","justifyContent","alignItems","TweetPage","setTweets","load","setLoad","errorMessage","setErrorMessage","promiseInProgress","usePromiseTracker","useEffect","setInterval","get","response","Provider","arr","error","Container","maxWidth","NavBar","Row","AppBar","Toolbar","textDecoration","to","margin","container","input","UserProfile","setName","logedIn","setlogedIn","setItem","stringify","htmlFor","Input","App","CssBaseline","Grid","xs","lg","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa265e3a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Error140 = () => {\n  return (\n    <div className=\"error140\">The tweet can't contain more then 140 chars.</div>\n  );\n}\nexport default Error140;\n","import axios from 'axios';\nconst baseUrl = 'https://fullstack-web-course.ew.r.appspot.com/';\n\n\n\nexport function getTweets() {\n    return axios.get(`${baseUrl}tweet`);\n  }\n\n  export function createTweet(tweet) {\n    return axios.post(`${baseUrl}tweet`, tweet);\n  }","import React from \"react\";\n\nconst TweetContext = React.createContext({\n  tweets: [],\n  addTweet: () => {},\n  addTweets: () => {},\n  setErrorMessege: () => {},\n});\n\nexport default TweetContext;\n","import React, { useState, useContext } from \"react\";\nimport { Card, TextField, Button } from \"@material-ui/core\";\nimport Error140 from \"./Error140\";\nimport { createTweet } from \"../lib/api\";\nimport { trackPromise } from \"react-promise-tracker\";\nimport TweetContext from \"./TweetContext\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    marginTop: 47,\n    border: \"2px solid white\",\n    height: 180,\n    color: \"white\",\n    backgroundColor: \"#16202C\",\n  },\n  button: {\n    position: \"relative\",\n    bottom: -84,\n    left: -10,\n    backgroundColor: \"#007BFF\",\n    width: 68,\n    height: 34,\n    borderRadius: 4,\n    alignSelf: \"flex-end\",\n  },\n}));\n\nconst CreateTweet = () => {\n  const classes = useStyles();\n  const [tweetInput, setTweetInput] = useState(\"\");\n  const contex = useContext(TweetContext);\n\n  const handleOnSubmit = async (event) => {\n    if (event) {\n      event.preventDefault();\n    }\n    const list = localStorage.getItem(\"userName\");\n    const parsedList = JSON.parse(list);\n    if (tweetInput !== \"\") {\n      trackPromise(\n        createTweet({\n          content: tweetInput,\n          date: new Date().toISOString(),\n          userName: parsedList,\n        })\n          .then((respond) => {\n            const { data } = respond;\n            console.log(data);\n            contex.addTweet(data);\n          })\n          .catch((err) => {\n            contex.setErrorMessege(err.message);\n          })\n      );\n    }\n    //clear input after submit\n    setTweetInput(\"\");\n  };\n\n  const onEnterPress = (event) => {\n    if (event.keyCode === 13 && event.shiftKey === false) {\n      event.preventDefault();\n      handleOnSubmit();\n    }\n  };\n\n  return (\n    <Card\n      // className=\"create-tweet-card\"\n      className={classes.root}\n    >\n      <form className=\"form\" onSubmit={handleOnSubmit}>\n        <TextField\n          onKeyDown={onEnterPress}\n          inputProps={{ maxLength: 140, style: { color: \"white\" } }}\n          multiline\n          style={{ width: \"100%\" }}\n          rows={9}\n          className=\"input\"\n          autoFocus\n          id=\"tweet\"\n          name=\"tweetInput\"\n          placeholder=\"What you have in mind...\"\n          value={tweetInput}\n          onChange={(event) => setTweetInput(event.target.value)}\n          required\n        />\n        {tweetInput.length === 140 ? <Error140 /> : <span></span>}\n        <Button\n          // className=\"submit-buttton\"\n          className={classes.button}\n          disabled={tweetInput.length === 140}\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Tweet\n        </Button>\n      </form>\n    </Card>\n  );\n};\nexport default CreateTweet;\n","import React, {useContext} from \"react\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport \"../App.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TweetContext from \"./TweetContext\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: \"100%\",\n    backgroundColor: \"#343A40\",\n    color: \"white\",\n  },\n});\n\nconst TweetList = () => {\n  const classes = useStyles();\n  const contex = useContext(TweetContext);\n  return (\n    <List>\n      {contex.tweets.map((item) => (\n        <ListItem style={{ paddingLeft: \"0\", paddingRight: \"0\" }} key={item.id}>\n          <Card className={classes.root} style={{ minHeight: \"100px\" }}>\n            <CardActions>\n              <span style={{ color: \"#6C757D\" }}>{item.userName}</span>\n              <span style={{ marginLeft: \"auto\", color: \"#6C757D\" }}>\n                {item.date}\n              </span>\n            </CardActions>\n            <CardActionArea>\n              <CardContent>\n                <Typography style = {{wordWrap: \"break-word\"}}>{item.content}</Typography>\n              </CardContent>\n            </CardActionArea>\n          </Card>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\nexport default TweetList;\n","import React from \"react\";\nimport Loader from \"react-loader-spinner\";\n\nconst LoadingIndicator = () => {\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Loader type=\"ThreeDots\" color=\"#2BAD60\" height=\"100\" width=\"100\" />\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useState, useEffect } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport CreateTweet from \"./createTweet\";\nimport TweetList from \"./TweetList\";\nimport LoadingIndicator from \"./Loader\";\nimport TweetContext from \"./TweetContext\";\nimport { getTweets } from \"../lib/api\";\nimport { usePromiseTracker } from \"react-promise-tracker\";\n\nconst TweetPage = () => {\n  const [tweets, setTweets] = useState([]);\n  const [load, setLoad] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const { promiseInProgress } = usePromiseTracker();\n\n  useEffect(() => {\n    setInterval(\n      () =>\n        getTweets()\n          .then((response) => {\n            const { data } = response;\n            setTweets(data.tweets);\n            setLoad(false)\n          })\n          .catch((err) => {\n            setErrorMessage(err.message);\n          }),\n      1000\n    );\n    \n  },[]);\n\n  const addTweet = (tweet) => {\n    setTweets([tweet, ...tweets]);\n  };\n\n  const addTweets = (arr) => {\n    setTweets(arr);\n  };\n  const setErrorMessege = (error) => {\n    setErrorMessage(error);\n  };\n\n  return (\n    <TweetContext.Provider\n      value={{ tweets, addTweet, addTweets, setErrorMessege }}\n    >\n      <div>\n        <Container maxWidth=\"sm\">\n          <CreateTweet />\n          {promiseInProgress || load ? <LoadingIndicator /> : \"\"}\n          {errorMessage && <h3 className=\"error\">{errorMessage}</h3>}\n          <TweetList />\n        </Container>\n      </div>\n    </TweetContext.Provider>\n  );\n};\n\nexport default TweetPage;\n","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Row from \"react-bootstrap/Row\";\nimport { Link } from \"react-router-dom\";\n\nconst NavBar = () => {\n\n  return (\n    <Row>\n      <AppBar\n        style={{\n          backgroundColor: \"#343A40\",\n          borderRadius: \"6px\",\n          alignSelf: \"center\",\n        }}\n        position=\"static\"\n      >\n        <Toolbar>\n          <Link style={{ textDecoration: \"none\" }} to=\"/tweets\">\n            <Typography variant=\"h5\" style={{ color: \"white\" }}>\n              Home\n            </Typography>\n          </Link>\n\n          <Link style={{ textDecoration: \"none\" }} to=\"/\">\n            <Typography\n              variant=\"h5\"\n              style={{\n                marginLeft: \"45px\",\n                color: \"white\",\n              }}\n             \n            >\n              Profile\n            </Typography>\n          </Link>\n        </Toolbar>\n      </AppBar>\n    </Row>\n  );\n};\n\nexport default NavBar;\n","import React, { useState } from \"react\";\nimport { Button, Input, Container, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    marginTop: 52,\n    width: 545,\n    backgroundColor: \"#16202C\",\n    margin: 0,\n  },\n  button: {\n    marginTop: 16,\n    backgroundColor: \"#007BFF\",\n    width: 68,\n    height: 34,\n    borderRadius: 4,\n    alignSelf: \"flex-end\",\n  },\n  container: {\n    width: \"76%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  input: {\n    height: \"61px\",\n    color: \"white\",\n    border: \"2px solid white\",\n    borderRadius: \"6px\",\n  },\n}));\n\nconst UserProfile = () => {\n  const classes = useStyles();\n  const [name, setName] = useState(\"\");\n  const [logedIn, setlogedIn] = useState(false);\n\n  const handleOnSubmit = async (event) => {\n    event.preventDefault();\n    localStorage.setItem(\"userName\", JSON.stringify(name));\n    setlogedIn(true);\n    setName(\"\");\n  };\n\n  const handleOnNameChange = (event) => {\n    setName(event.target.value);\n  };\n\n  return (\n    <Container className={classes.container}>\n      <div className={classes.root}>\n        {!logedIn ? (\n          <form className=\"user-form\" onSubmit={handleOnSubmit}>\n            <h1 className=\"margin-top-52px, h1-custom\">Profile</h1>\n            <h3 className=\"h3-custom\">User Name</h3>\n            <label htmlFor=\"userName\"></label>\n            <Input\n              className={classes.input}\n              autoFocus\n              id=\"userName\"\n              name=\"name\"\n              value={name}\n              onChange={handleOnNameChange}\n              inputProps={{ \"aria-label\": \"description\" }}\n              required\n            />\n            <Button\n              className={classes.button}\n              type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Save\n            </Button>\n          </form>\n        ) : (\n          <div>\n            <Typography\n              style={{\n                margin: \"45px\",\n                color: \"white\",\n              }}\n              variant=\"h5\"\n              color=\"inherit\"\n            >\n              You successfully logged in!\n            </Typography>\n          </div>\n        )}\n      </div>\n    </Container>\n  );\n};\n\nexport default UserProfile;\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport './App.css';\nimport TweetPage from './components/TweetPage';\nimport NavBar from './components/NavBar';\nimport Container from 'react-bootstrap/Container'\nimport UserProfile from './components/UserProfile';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Grid from '@material-ui/core/Grid';\n\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <CssBaseline />\n        <Container>\n          <Grid container style={{ justifyContent: \"center\", display: \"flex\" }}>\n            <Grid item xs={12} lg={8} >\n              <NavBar />\n            </Grid>\n          </Grid>\n          <Switch>\n            <Route exact path=\"/\">\n              <UserProfile />\n            </Route>\n            <Route path=\"/tweets\">\n              <TweetPage />\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}